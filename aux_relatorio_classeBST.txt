Essas são as principais funções da classe BST, que permitem criar e manipular uma Árvore Binária de Busca, 
realizar travessias, buscar elementos, verificar o equilíbrio, e obter informações sobre a árvore.

Node - Classe que define cada nó da estrutura.
Como o problema pede para ignorar o valor atribuído à chave, este programa não registra nenhum valor, e assim,
apenas as chaves são manipuladas pela aplicação.
*Atributos:*
key - chave
Node left - elemento 'filho' de um nó, que também é um nó. Este é o nó que, figurativamente, está à esquerda 
do nó 'pai'
Node right - de forma análoga, este é o nó que está à direita do nó 'pai'.

*Métodos:*
♥ Possui apenas o método construtor, que recebe como argumento apenas a chave.

BST - Classe que define o framework para Árvores Binárias de Busca
*Atributos:*
Node root - raiz da árvore

*Métodos:*
♥ Construtor com raiz None - a árvore começa vazia, e o primeiro nó será a raiz; não recebe parâmetros.

♥ insert(self, key) - recebe a chave a ser inserida como parâmetro, mas não retorna nada; não deve aceitar 
chaves repetidas.

♥ _insert_recursively - método privado que auxilia a função anterior. Retorna o nó correspondente à chave 
passada como parâmetro.

♥ search(self, key) - recebe uma chave como parâmetro e retorna o nó com essa chave na árvore, se existir. 
Caso contrário, retorna None.

♥ inorder_traversal(self) - retorna uma lista com os elementos da árvore em ordem crescente (inordem).

♥ preorder_traversal(self) - retorna uma lista com os elementos da árvore na ordem de pré-ordem (raiz, 
esquerda, direita).

♥ postorder_traversal(self) - retorna uma lista com os elementos da árvore na ordem de pós-ordem (esquerda, 
direita, raiz).

♥ find_min(self) - retorna a chave do menor elemento presente na árvore.

♥ find_max(self) - retorna a chave do maior elemento presente na árvore.

♥ is_balanced(self) - verifica se a árvore é balanceada e retorna True se for, caso contrário, retorna False.

♥ _is_balanced_recursive(self, root) - método privado que auxilia a função anterior, verificando 
recursivamente o equilíbrio da árvore a partir do nó raiz fornecido como parâmetro.

♥ internal_length(self) - retorna o comprimento interno da árvore, ou seja, a soma das distâncias de 
todos os nós ao nó raiz.

♥ _internal_length_recursive(self, root, depth) - método privado que auxilia a função anterior, calculando 
recursivamente o comprimento interno a partir do nó raiz fornecido e a profundidade atual.

♥ level_order_traversal(self) - retorna uma lista com os elementos da árvore na ordem de levelOrder 
(por nível).'








